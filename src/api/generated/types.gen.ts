// This file is auto-generated by @hey-api/openapi-ts

export type AccessAndRefreshToken = {
  accessToken: string
  refreshToken: string
}

export type GenericError = {
  error: string
}

export type Media = {
  id: string
  creatorId: string
  name: string
  bucket: string
  type: string
  url: string
  createdAt: string
}

export type PresignedURL = {
  presignedUrl: string
  mediaUrl: string
  expiresIn: number
}

export type Team = {
  id: string
  competitionId: string
  name: string
  joinCode: string
  paymentProofMediaId: string | null
  isVerified: boolean
  verificationError: string | null
  createdAt: string | unknown
  updatedAt: string | null
}

export type TeamMember = {
  userId: string
  teamId: string
  role: 'leader' | 'member'
  nisnMediaId: string | null
  kartuMediaId: string | null
  posterMediaId: string | null
  twibbonMediaId: string | null
  isVerified: boolean
  verificationError: string | null
  nisn: Media
  kartu: Media
  poster: Media
  twibbon: Media
}

export type role = 'leader' | 'member'

export type User = {
  id: string
  email: string
  fullName: string | null
  birthDate: string | null
  education: ('s1' | 's2' | 'sma') | null
  entrySource: string | null
  instance: string | null
  phoneNumber: string | null
  idLine: string | null
  idDiscord: string | null
  idInstagram: string | null
  consent: boolean
  isRegistrationComplete: boolean
  createdAt: string | unknown
  updatedAt: string | unknown
}

export type education = 's1' | 's2' | 'sma'

export type ValidationError = {
  formErrors: Array<string>
  fieldErrors: {
    [key: string]: Array<string>
  }
}

export type GetHealthStatusResponse = {
  message?: string
}

export type GetHealthStatusError = (GenericError | ValidationError) | GenericError

export type BasicRegisterData = {
  body: {
    email: string
    password: string
    confirmPassword: string
  }
}

export type BasicRegisterResponse = void

export type BasicRegisterError = (GenericError | ValidationError) | GenericError

export type BasicVerifyAccountData = {
  query: {
    token: string
    user: string
  }
}

export type BasicVerifyAccountResponse = AccessAndRefreshToken

export type BasicVerifyAccountError = (GenericError | ValidationError) | GenericError

export type BasicLoginData = {
  body: {
    email: string
    password: string
  }
}

export type BasicLoginResponse = AccessAndRefreshToken

export type BasicLoginError = (GenericError | ValidationError) | GenericError

export type GoogleAuthCallbackData = {
  query: {
    code: string
  }
}

export type GoogleAuthCallbackResponse = AccessAndRefreshToken

export type GoogleAuthCallbackError = (GenericError | ValidationError) | GenericError

export type RefreshData = {
  query: {
    token: string
  }
}

export type RefreshResponse = AccessAndRefreshToken

export type RefreshError = (GenericError | ValidationError) | GenericError

export type LogoutResponse = void

export type LogoutError = (GenericError | ValidationError) | GenericError

export type SelfResponse = User

export type SelfError = GenericError

export type GetPresignedLinkData = {
  query: {
    bucket: 'competition-registration'
    filename: string
  }
}

export type GetPresignedLinkResponse = PresignedURL

export type GetPresignedLinkError = (GenericError | ValidationError) | GenericError

export type PutChangeTeamNameData = {
  body: {
    name: string
  }
  path: {
    teamId: string
  }
}

export type PutChangeTeamNameResponse = Team

export type PutChangeTeamNameError = (GenericError | ValidationError) | GenericError

export type DeleteTeamMemberData = {
  body: {
    userId: string
  }
  path: {
    teamId: string
  }
}

export type DeleteTeamMemberResponse = TeamMember

export type DeleteTeamMemberError = (GenericError | ValidationError) | GenericError

export type PostTeamVerificationData = {
  body?: {
    isVerified: boolean
    verificationError?: string
  }
  path: {
    competitionId: string
    teamId: string
  }
}

export type PostTeamVerificationResponse = unknown

export type PostTeamVerificationError = (GenericError | ValidationError) | GenericError

export type PostCreateTeamData = {
  body: {
    competitionId: string
    name: string
  }
}

export type PostCreateTeamResponse = Team

export type PostCreateTeamError = (GenericError | ValidationError) | GenericError

export type PostTeamDocumentData = {
  body: {
    paymentProofMediaId?: string | null
  }
  path: {
    teamId: string
  }
}

export type PostTeamDocumentResponse = Team

export type PostTeamDocumentError = (GenericError | ValidationError) | GenericError

export type PostTeamMemberDocumentData = {
  body: {
    nisnMediaId?: string | null
    kartuMediaId?: string | null
    posterMediaId?: string | null
    twibbonMediaId?: string | null
  }
  path: {
    teamId: string
  }
}

export type PostTeamMemberDocumentResponse = TeamMember

export type PostTeamMemberDocumentError = (GenericError | ValidationError) | GenericError

export type GetTeamMemberData = {
  path: {
    teamId: string
  }
}

export type GetTeamMemberResponse = TeamMember

export type GetTeamMemberError = (GenericError | ValidationError) | GenericError

export type PostTeamMemberVerificationData = {
  body?: {
    isVerified: boolean
    verificationError?: string
  }
  path: {
    competitionId: string
    teamId: string
    userId: string
  }
}

export type PostTeamMemberVerificationResponse = unknown

export type PostTeamMemberVerificationError =
  | (GenericError | ValidationError)
  | GenericError

export type GetUserResponse = User

export type GetUserError = (GenericError | ValidationError) | GenericError

export type UpdateUserData = {
  body?: {
    fullName?: string | null
    birthDate?: string | null
    education?: ('s1' | 's2' | 'sma') | null
    entrySource?: string | null
    instance?: string | null
    phoneNumber?: string | null
    idLine?: string | null
    idDiscord?: string | null
    idInstagram?: string | null
    consent?: boolean
  }
}

export type UpdateUserResponse = User

export type UpdateUserError = (GenericError | ValidationError) | GenericError
