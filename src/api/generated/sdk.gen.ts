// This file is auto-generated by @hey-api/openapi-ts
import axiosClient from "../axiosClient"
import {
  createClient,
  createConfig,
  type OptionsLegacyParser
} from '@hey-api/client-axios'
import type {
  GetHealthStatusError,
  GetHealthStatusResponse,
  BasicRegisterData,
  BasicRegisterError,
  BasicRegisterResponse,
  BasicVerifyAccountData,
  BasicVerifyAccountError,
  BasicVerifyAccountResponse,
  BasicLoginData,
  BasicLoginError,
  BasicLoginResponse,
  GoogleAuthCallbackData,
  GoogleAuthCallbackError,
  GoogleAuthCallbackResponse,
  RefreshData,
  RefreshError,
  RefreshResponse,
  LogoutError,
  LogoutResponse,
  SelfError,
  SelfResponse,
  GetPresignedLinkData,
  GetPresignedLinkError,
  GetPresignedLinkResponse,
  PutChangeTeamNameData,
  PutChangeTeamNameError,
  PutChangeTeamNameResponse,
  DeleteTeamMemberData,
  DeleteTeamMemberError,
  DeleteTeamMemberResponse,
  PostTeamVerificationData,
  PostTeamVerificationError,
  PostTeamVerificationResponse,
  PostCreateTeamData,
  PostCreateTeamError,
  PostCreateTeamResponse,
  PostTeamDocumentData,
  PostTeamDocumentError,
  PostTeamDocumentResponse,
  PostTeamMemberDocumentData,
  PostTeamMemberDocumentError,
  PostTeamMemberDocumentResponse,
  GetTeamMemberData,
  GetTeamMemberError,
  GetTeamMemberResponse,
  PostTeamMemberVerificationData,
  PostTeamMemberVerificationError,
  PostTeamMemberVerificationResponse,
  GetUserError,
  GetUserResponse,
  UpdateUserData,
  UpdateUserError,
  UpdateUserResponse
} from './types.gen'

export const client = createClient(createConfig())

export const getHealthStatus = async <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetHealthStatusResponse,
    GetHealthStatusError,
    ThrowOnError
  >({
    ...options,
    url: '/api/health'
  })
}

export const basicRegister = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<BasicRegisterData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    BasicRegisterResponse,
    BasicRegisterError,
    ThrowOnError
  >({
    ...options,
    url: '/api/auth/basic/register'
  })
}

export const basicVerifyAccount = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<BasicVerifyAccountData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    BasicVerifyAccountResponse,
    BasicVerifyAccountError,
    ThrowOnError
  >({
    ...options,
    url: '/api/auth/verify'
  })
}

export const basicLogin = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<BasicLoginData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    BasicLoginResponse,
    BasicLoginError,
    ThrowOnError
  >({
    ...options,
    url: '/api/auth/basic/login'
  })
}

export const googleAuth = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<void, unknown, ThrowOnError>({
    ...options,
    url: '/api/auth/google'
  })
}

export const googleAuthCallback = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GoogleAuthCallbackData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GoogleAuthCallbackResponse,
    GoogleAuthCallbackError,
    ThrowOnError
  >({
    ...options,
    url: '/api/auth/google/callback'
  })
}

export const refresh = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<RefreshData, ThrowOnError>
) => {
  return (options?.client ?? client).get<RefreshResponse, RefreshError, ThrowOnError>({
    ...options,
    url: '/api/auth/refresh'
  })
}

export const logout = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).post<LogoutResponse, LogoutError, ThrowOnError>({
    ...options,
    url: '/api/auth/logout'
  })
}

export const self = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<SelfResponse, SelfError, ThrowOnError>({
    ...options,
    url: '/api/auth/self'
  })
}

export const getPresignedLink = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetPresignedLinkData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetPresignedLinkResponse,
    GetPresignedLinkError,
    ThrowOnError
  >({
    ...options,
    url: '/api/media/upload'
  })
}

export const putChangeTeamName = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PutChangeTeamNameData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    PutChangeTeamNameResponse,
    PutChangeTeamNameError,
    ThrowOnError
  >({
    ...options,
    url: '/api/team/{teamId}'
  })
}

export const deleteTeamMember = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DeleteTeamMemberData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteTeamMemberResponse,
    DeleteTeamMemberError,
    ThrowOnError
  >({
    ...options,
    url: '/api/team/{teamId}'
  })
}

export const postTeamVerification = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PostTeamVerificationData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    PostTeamVerificationResponse,
    PostTeamVerificationError,
    ThrowOnError
  >({
    ...options,
    url: '/api/admin/{competitionId}/team/{teamId}'
  })
}

export const postCreateTeam = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PostCreateTeamData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    PostCreateTeamResponse,
    PostCreateTeamError,
    ThrowOnError
  >({
    ...options,
    url: '/api/team'
  })
}

export const postTeamDocument = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PostTeamDocumentData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    PostTeamDocumentResponse,
    PostTeamDocumentError,
    ThrowOnError
  >({
    ...options,
    url: '/api/team/{teamId}/upload'
  })
}

export const postTeamMemberDocument = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PostTeamMemberDocumentData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    PostTeamMemberDocumentResponse,
    PostTeamMemberDocumentError,
    ThrowOnError
  >({
    ...options,
    url: '/api/team/{teamId}/upload'
  })
}

export const getTeamMember = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetTeamMemberData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetTeamMemberResponse,
    GetTeamMemberError,
    ThrowOnError
  >({
    ...options,
    url: '/api/team/{teamId}/member'
  })
}

export const postTeamMemberVerification = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PostTeamMemberVerificationData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    PostTeamMemberVerificationResponse,
    PostTeamMemberVerificationError,
    ThrowOnError
  >({
    ...options,
    url: '/api/admin/{competitionId}/team/{teamId}/{userId}'
  })
}

export const getUser = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<GetUserResponse, GetUserError, ThrowOnError>({
    ...options,
    url: '/api/user'
  })
}

export const updateUser = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<UpdateUserData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateUserResponse,
    UpdateUserError,
    ThrowOnError
  >({
    ...options,
    url: '/api/user'
  })
}
